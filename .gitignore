# Google App Engine generated folder
appengine-generated/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

git

[ [$-/Git start/run/]-impor=[$-git-blame.statusBarPositionPriority] comandos:](URL)
[$ git blame.statusBarPositionPriority](URL)=[500](url)
[$ git blame.inlineMessageEnabled](URL)=[false](URL)
[$ git blame.inlineMessageFormat](URL)=[Blame $ {author.name} (${time.ago})](URL)
[$ git blame.inlineMessageNoCommit](URL)
[$ git blame.inlineMessageMargin](URL)
[$ git blame.remoteName](URL)
[$ git blame.commitUrl](URL)
[$ git blame.ignoreWhitespace](URL)
[$ git blame.pluralWebPathSubstrings](URL) [$ gi tblame.commitUrl](URL) [$ bitbucket,atlassian](URL)
[$ git blame.delayBlame](URL)
[$ git blame.parallelBlames](URL)

ID:/
Descrição:/
Title:/

[$ git blame.quickInfo](URL)                 [Git Blame: Show quick info](URL)
[$ git blame.online](URL)                    [Git Blame: View last change online](URL)
[$ git blame.addCommitHashToClipboard](URL)  [Git Blame: Copy hash to clipboard](URL)
[$ git blame.addToolUrlToClipboard](URL)     [Git Blame: Copy tool URL to clipboard](URL)
[$ git blame.gitShow](URL)                   [Git Blame: Git show for current line hash](URL)

[$ onStartupFinished](URL)
[$ git-submodule - Inicializar, atualizar ou inspecionar submódulos](url)
[$ git submodule [--quiet] [--cached]](url)
[$ git submodule [--quiet] add [<options>] [--] <repository> [<path>]](url)
[$ git submodule [--quiet] status [--cached] [--recursive] [--] [<path>…​]](url)
[$ git submodule [--quiet] init [--] [<path>…​]](url)
[$ git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…​)](url)
[$ git submodule [--quiet] update [<options>] [--] [<path>…​]](url)
[$ git submodule [--quiet] set-branch [<options>] [--] <path>](url)
[$ git submodule [--quiet] set-url [--] <path> <newurl>](url)
[$ git submodule [--quiet] summary [<options>] [--] [<path>…​]](url)
[$ git submodule [--quiet] foreach [--recursive] <command>](url)
[$ git submodule [--quiet] sync [--recursive] [--] [<path>…​]](url)
[$ git submodule [--quiet] absorbgitdirs [--] [<path>…​]](url)

DESCRIÇÃO:

Inspeciona, atualiza e gerencia submódulos.

Para obter mais informações sobre submódulos, consulte [gitsubmodules[7]](https://git-scm.com/docs/gitsubmodules).

COMANDOS:

 Sem argumentos, mostra o status dos submódulos existentes. 
 
 Vários subcomandos estão disponíveis para executar operações nos 
submódulos.

 Adicionar: [[-b <branch>] [-f|--force] [--name <nome>] [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]](url)

 Adicionar o repositório fornecido como um submódulo no caminho fornecido ao conjunto de alterações a ser confirmado ao lado do atual 

 Projeto: 

O projeto atual é denominado "Superprojeto".

<repository> 

 É a URL do repositório de origem do novo submódulo. 
 Isso pode ser uma URL absoluta, ou 
 
[(se começar com -u origem ./ ou.. /) 
](url), 

o local relativo ao controle remoto padrão do superprojeto repository (Observe que para especificar um repositório [foo.git](url) que está localizado ao lado de um superprojeto bar.git, você irá
ter que usar em vez de - como se poderia esperar ao seguir as regras para URLs relativas - porque a avaliação de URLs relativas no Git é idêntico ao de diretórios relativos).../foo.git./foo.git

 O controle remoto padrão é o remoto da ramificação de rastreamento remoto do ramo atual. 
 Se essa ramificação de rastreamento remoto não existir ou o HEAD é destacado, "origem" é assumido como o controle remoto padrão. 
 Se o superprojeto não tiver um controle remoto padrão configurado o superprojeto é seu próprio upstream autoritativo e o atual diretório de trabalho é usado em vez disso.

 O argumento opcional <caminho> é o local relativo para o clonado submódulo a existir no superProjeto. 

 Se <caminho> não for informado, a parte canônica do repositório de origem usamos o seguinte 
[("repo"para"/path/to/repo.git" 
e "foo" para "host.xz:foo/.git")](url). 
 
 Se [<caminho>](url) existe e já é um repositório Git válido, então ele é preparado para confirmação sem clonagem. 
 
 O [<caminho>(url) também é usado com submódulo nome lógico em suas entradas de configuração, a menos que seja usado para especificar um nome lógico.

[(<--name-->)](url)

 A URL fornecida é gravada para uso por usuários subsequentes clonagem do superprojeto. 
 Se a URL for fornecida em relação ao repositório do superprojeto, a presunção é o superprojeto e 
 Os repositórios de submódulos serão mantidos juntos no mesmo relativo e somente a URL do superProjeto precisa ser fornecida. 
 [$ git [<> <-submodule-> <>] ](url) localizará corretamente o submódulo usando o relativo URL em:
 [$ git 
 <>Modules.gitmodules.status/HTML/<>/
 [..gir import={submodule
 [(<""><--subModule--><"">)]
 [--cached] [--recursivo] [--] 
 [<<caminho>>] }](url);

 Mostrar o status dos submódulos. 
 Isso imprimirá o SHA-1 do atualmente com check-out de confirmação para cada submódulo, juntamente com o 
 O caminho do submódulo e a saída do git descrevem para o [SHA-1](url). 
 Cada SHA-1 possivelmente deve  ser iniciado se o submódulo for não inicializado, se o submódulo com check-out no momento confirmar não corresponde a SHA-1 encontrado no índice do contendo repositório e se o submódulo tiver conflitos de mesclagem. [ [-+U]/- U <Repository>](URL)

Se for especificado, esse comando imprimirá o SHA-1 registrado no superprojeto para cada submódulo.--cached

Se for especificado, esse comando será recorrente em aninhado submódulos, e mostrar seu status também.--recursive

Se você estiver interessado apenas em alterações do atualmente inicializado submódulos relativos à confirmação registada no índice ou no HEAD, o git-status[1] e [o git-diff[1]](https://git-scm.com/docs/git-status) fornecerão essas informações também (e também pode relatar alterações na árvore de trabalho de um submódulo).

init [--] [<caminho>...]

Inicializar os submódulos registrados no índice (que foram adicionado e confirmado em outro lugar) definindo em , usando a mesma configuração de como um modelo. Se a URL for relativa, ela será resolvida usando O controle remoto padrão. Se não houver nenhum controle remoto padrão, o atual O repositório será assumido como upstream.submodule.$name.url.git/config.gitmodules

Os argumentos opcionais <caminho> limitam quais submódulos serão inicializados. Se nenhum caminho for especificado e submodule.active tiver sido configurado, submódulos configurado para ser ativo será inicializado, caso contrário, todos os submódulos são Inicializado.

It will also copy the value of , if present in the file, to , but (1) this command does not alter existing information in , and (2) that is set to a custom command is not copied for security reasons.submodule.$name.update.gitmodules.git/config.git/configsubmodule.$name.update

You can then customize the submodule clone URLs in for your local setup and proceed to ; you can also just use without the explicit init step if you do not intend to customize any submodule locations..git/configgit submodule updategit submodule update --init

See the add subcommand for the definition of default remote.

deinit [-f|--force] (--all|[--] <path>…​)
Unregister the given submodules, i.e. remove the whole section from .git/config together with their work tree. Further calls to , and will skip any unregistered submodules until they are initialized again, so use this command if you don’t want to have a local checkout of the submodule in your working tree anymore.submodule.$namegit submodule updategit submodule foreachgit submodule sync

When the command is run without pathspec, it errors out, instead of deinit-ing everything, to prevent mistakes.

If is specified, the submodule’s working tree will be removed even if it contains local modifications.--force

If you really want to remove a submodule from the repository and commit that use [git-rm[1]](https://git-scm.com/docs/git-rm) instead. See [gitsubmodules[7]](https://git/scm.com/docs/git.submodules/) for removal options.

update [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--filter <filter spec>] [--] [<path>…​]
Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules. The "updating" can be done in several ways depending on command line options and the value of configuration variable. The command line option takes precedence over the configuration variable. If neither is given, a checkout is performed. (note: what is in file is irrelevant at this point; see above for how is used). The update procedures supported both from the command line as well as through the configuration are:submodule.<name>.update.gitmodulesgit submodule init.gitmodulessubmodule.<name>.update

checkout
the commit recorded in the superproject will be checked out in the submodule on a detached HEAD.

If is specified, the submodule will be checked out (using ), even if the commit specified in the index of the containing repository already matches the commit checked out in the submodule.--forcegit checkout --force

rebase
the current branch of the submodule will be rebased onto the commit recorded in the superproject.

merge
the commit recorded in the superproject will be merged into the current branch in the submodule.

The following update procedures have additional limitations:

custom command
mechanism for running arbitrary commands with the commit ID as an argument. Specifically, if the configuration variable is set to , the object name of the commit recorded in the superproject for the submodule is appended to the string and executed. Note that this mechanism is not supported in the file or on the command line.submodule.<name>.update!custom commandcustom command.gitmodules

none
the submodule is not updated. This update procedure is not allowed on the command line.

If the submodule is not yet initialized, and you just want to use the setting as stored in , you can automatically initialize the submodule with the option..gitmodules--init

If is specified, this command will recurse into the registered submodules, and update any nested submodules within.--recursive

If is specified, the given partial clone filter will be applied to the submodule. See [git-rev-list[1]](https://git-scm.com/docs/git-rev-list) for details on filter specifications.--filter <filter spec>

set-branch (-b|--branch) <branch> [--] <path>
set-branch (-d|--default) [--] <path>
Sets the default remote tracking branch for the submodule. The option allows the remote branch to be specified. The option removes the submodule.<name>.branch configuration key, which causes the tracking branch to default to the remote HEAD.--branch--default

set-url [--] <path> <newurl>
Sets the URL of the specified submodule to <newurl>. Then, it will automatically synchronize the submodule’s new remote URL configuration.

summary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<path>…​]
Show commit summary between the given commit (defaults to HEAD) and working tree/index. For a submodule in question, a series of commits in the submodule between the given super project commit and the index or working tree (switched by ) are shown. If the option is given, show the series of commits in the submodule between the index of the super project and the working tree of the submodule (this option doesn’t allow to use the option or to provide an explicit commit).--cached--files--cached

Using the option with [git-diff[1]](https://git-scm.com/docs/git-diff) will provide that information too.--submodule=log

foreach [--recursive] <command>
Evaluates an arbitrary shell command in each checked out submodule. The command has access to the variables $name, $sm_path, $displaypath, $sha1 and $toplevel: $name is the name of the relevant submodule section in , $sm_path is the path of the submodule as recorded in the immediate superproject, $displaypath contains the relative path from the current working directory to the submodules root directory, $sha1 is the commit as recorded in the immediate superproject, and $toplevel is the absolute path to the top-level of the immediate superproject. Note that to avoid conflicts with $PATH on Windows, the $path variable is now a deprecated synonym of $sm_path variable. Any submodules defined in the superproject but not checked out are ignored by this command. Unless given , foreach prints the name of each submodule before evaluating the command. If is given, submodules are traversed recursively (i.e. the given shell command is evaluated in nested submodules as well). A non-zero return from the command in any submodule causes the processing to terminate. This can be overridden by adding || : to the end of the command..gitmodules--quiet--recursive

As an example, the command below will show the path and currently checked out commit for each submodule:

git submodule foreach 'echo $sm_path `git rev-parse HEAD`'
sync [--recursive] [--] [<path>…​]
Synchronizes submodules' remote URL configuration setting to the value specified in . It will only affect those submodules which already have a URL entry in .git/config (that is the case when they are initialized or freshly added). This is useful when submodule URLs change upstream and you need to update your local repositories accordingly..gitmodules

git submodule sync synchronizes all submodules while synchronizes submodule "A" only.git submodule sync -- A

If is specified, this command will recurse into the registered submodules, and sync any nested submodules within.--recursive

absorbgitdirs
If a git directory of a submodule is inside the submodule, move the git directory of the submodule into its superproject’s path and then connect the git directory and its working directory by setting the and adding a .git file pointing to the git directory embedded in the superprojects git directory.$GIT_DIR/modulescore.worktree

A repository that was cloned independently and later added as a submodule or old setups have the submodules git directory inside the submodule instead of embedded into the superprojects git directory.

This command is recursive by default.

OPTIONS
-q
--quiet
Only print error messages.

--progress
This option is only valid for add and update commands. Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.

--all
This option is only valid for the deinit command. Unregister all submodules in the working tree.

-b <branch>
--branch <branch>
Branch of repository to add as submodule. The name of the branch is recorded as in for . A special value of is used to indicate that the name of the branch in the submodule should be the same name as the current branch in the current repository. If the option is not specified, it defaults to the remote HEAD.submodule.<name>.branch.gitmodulesupdate --remote.

-f
--force
This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule.

--cached
This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead.

--files
This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used.

-n
--summary-limit
This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules.

--remote
This option is only valid for the update command. Instead of using the superproject’s recorded SHA-1 to update the submodule, use the status of the submodule’s remote-tracking branch. The remote used is branch’s remote (), defaulting to . The remote branch used defaults to the remote , but the branch name may be overridden by setting the option in either or (with taking precedence).branch.<name>.remoteoriginHEADsubmodule.<name>.branch.gitmodules.git/config.git/config

This works for any of the supported update procedures (, , etc.). The only change is the source of the target SHA-1. For example, will merge upstream submodule changes into the submodules, while will merge superproject gitlink changes into the submodules.--checkout--rebasesubmodule update --remote --mergesubmodule update --merge

In order to ensure a current tracking branch state, fetches the submodule’s remote repository before calculating the SHA-1. If you don’t want to fetch, you should use .update --remotesubmodule update --remote --no-fetch

Use this option to integrate changes from the upstream subproject with your submodule’s current HEAD. Alternatively, you can run from the submodule, which is equivalent except for the remote branch name: uses the default upstream repository and , while uses the submodule’s . Prefer if you want to distribute the default upstream branch with the superproject and if you want a more native feel while working in the submodule itself.git pullupdate --remotesubmodule.<name>.branchgit pullbranch.<name>.mergesubmodule.<name>.branchbranch.<name>.merge

-N
--no-fetch
This option is only valid for the update command. Don’t fetch new objects from the remote site.

--checkout
This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override when set to a value other than . If the key is either not explicitly set or set to , this option is implicit.submodule.$name.updatecheckoutsubmodule.$name.updatecheckout

--merge
This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key is set to , this option is implicit.submodule.$name.updatemerge

--rebase
This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with [git-rebase[1]](https://git-scm.com/docs/git-rebase). If the key is set to , this option is implicit.submodule.$name.updaterebase

--init
This option is only valid for the update command. Initialize all submodules for which "git submodule init" has not been called so far before updating.

--name
This option is only valid for the add command. It sets the submodule’s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a /.

--reference <repository>
This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the [git-clone[1]](https://git-scm.com/docs/git-clone) command.

NOTE: Do not use this option unless you have read the note for [git-clone[1]](https://git-scm.com/docs/git-clone)'s , , and options carefully.--reference--shared--dissociate

--dissociate
This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the [git-clone[1]](https://git-scm.com/docs/git-clone) command.

NOTE: see the NOTE for the option.--reference

--recursive
This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on).

--depth
This option is valid for add and update commands. Create a shallow clone with a history truncated to the specified number of revisions. See [git-clone[1]](https://git-scm.com/docs/git-clone)

--[no-]recommend-shallow
This option is only valid for the update 
command. The initial clone of a submodule will use the recommended as provided by the file by default. To ignore the suggestions use .submodule.<name>.shallow.gitmodules--no-recommend-shallow

-j <n>
--empregos <n>
Essa opção só é válida para o comando update. Clone novos submódulos em paralelo com o maior número de trabalhos. O padrão é a opção.submodule.fetchJobs

--[não-]ramificação única
Essa opção só é válida para o comando update. Clone apenas uma ramificação durante a atualização: HEAD ou uma especificada por --branch.

<caminho>...
Caminhos para o(s) submódulo(s). Quando especificado, isso restringirá o comando para operar apenas nos submódulos encontrados nos caminhos especificados. (Este argumento é necessário com add).

LIMAS
Ao inicializar submódulos, um arquivo no diretório de nível superior do repositório que contém é usado para localizar a url de cada submódulo. Esse arquivo deve ser formatado da mesma forma que o . A chave Para cada URL do submódulo é "submodule.$name.url". Consulte [gitmodules[5]](https://git-scm.com/docs/gitmodules) para obter detalhes..gitmodules$GIT_DIR/config

 $ Git (<< - U origem name>>)

VEJA TAMBÉM:

[ [git.subModules[7]](https://git-scm.com/docs/git.subModules), [git.Modules[5]](https://git-scm.com/docs/gitModules) ](url)
